@page "/q3-4-5"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using System.Text.Json;
@using Desafio.RedService.Presentation.Blazor.Site.Entities;
@using Microsoft.JSInterop
@using System.Text;
@using System.Net.Http.Headers;
@using System.Net;
@using System.Net.Mime;


<PageTitle>Questões 3-4-5</PageTitle>

<h1>Questões 3, 4 E 5</h1>

<div class="field mt-xl-5" style="display:flex;justify-content:center">

    <div>
        <button style="width:180px;margin-right:35px" class="button is-info" @onclick="CriarEGravarLista">Gerar arquivo data.json</button>

    </div>
    <div>
        <button style="width:180px;" class="button is-warning" @onclick="CarregarEExibirGrid">Gerar grid</button>
    </div>
</div>

@if (criacaoConcluida)
{
  
   
    <p style="display:flex;justify-content:center;">Lista criada e arquivo data.json gravado com sucesso.</p>

    <div style="display:flex;justify-content:center;">
    <a class="button is-success" href="@arquivoDownload" download="data.json">Baixar JSON</a>
    </div>
    
}
<div class="field mt-xl-5" style="display:flex;justify-content:center">
    @if (mostrarGrid)
    {
        <table class="table is-bordered is-striped is-narrow is-hoverable mb-xl-5" style="max-width:350px">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Descrição</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listaObjetos)
                {
                    <tr>
                        <td>@item.Codigo</td>
                        <td>@item.Descricao</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private List<ClsTeste> listaObjetos = new List<ClsTeste>();
    private bool mostrarGrid = false;
    private bool criacaoConcluida = false;
    string arquivoDownload = "";

    public async Task CriarEGravarLista()
    {
        listaObjetos.Clear();

        for (int i = 1; i <= 100; i++)
        {
            ClsTeste objeto = new ClsTeste
                {
                    Codigo = i,
                    Descricao = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss.fff")
                };

            listaObjetos.Add(objeto);
        }

        await File.WriteAllTextAsync("data.json", JsonSerializer.Serialize(listaObjetos));
        criacaoConcluida = true;
    }

    public async Task CarregarEExibirGrid()
    {
        try
        {
            var jsonString = await File.ReadAllTextAsync("data.json");
            listaObjetos = JsonSerializer.Deserialize<List<ClsTeste>>(jsonString);
            mostrarGrid = true;
        }
        catch (Exception ex)
        {
            listaObjetos.Clear();
            mostrarGrid = false;
        }
    }

    public void BaixarArquivoJson()
    {
        try
        {
            var jsonString = JsonSerializer.Serialize(listaObjetos);
            var bytes = Encoding.UTF8.GetBytes(jsonString);

            arquivoDownload = $"data:application/json;charset=utf-8;base64,{Convert.ToBase64String(bytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao baixar o arquivo: {ex.Message}");
        }
    }


  
}
